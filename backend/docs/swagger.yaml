basePath: /api
definitions:
  entities.Book:
    properties:
      id:
        type: string
        example: "550e8400-e29b-41d4-a716-446655440000"
        description: Unique identifier for the book
      title:
        type: string
        example: "The Great Gatsby"
        description: Title of the book
      author:
        type: string
        example: "F. Scott Fitzgerald"
        description: Author of the book
      year:
        type: integer
        example: 1925
        description: Publication year of the book
      isbn:
        type: string
        example: "978-0743273565"
        description: International Standard Book Number
      created_at:
        type: string
        example: "2024-01-15T10:30:00Z"
        description: Timestamp when the book was created
      updated_at:
        type: string
        example: "2024-01-15T14:45:00Z"
        description: Timestamp when the book was last updated
      deleted_at:
        type: string
        example: null
        description: Timestamp when the book was soft-deleted (null if not deleted)
    type: object
    description: A book entity representing a book in the library
  entities.URLRequest:
    properties:
      url:
        type: string
        example: "https://example.com/page?utm_source=google&utm_medium=cpc"
        description: The URL to be processed
      operation:
        type: string
        example: "canonical"
        description: The type of processing operation (canonical, redirection, or all)
        enum: ["canonical", "redirection", "all"]
    type: object
    description: Request for URL processing operations
  entities.URLResponse:
    properties:
      processed_url:
        type: string
        example: "https://example.com/page"
        description: The processed URL after applying the specified operation
    type: object
    description: Response containing the processed URL
  handlers.CreateBookRequest:
    properties:
      title:
        type: string
        example: "To Kill a Mockingbird"
        description: Title of the book to create
      author:
        type: string
        example: "Harper Lee"
        description: Author of the book to create
      year:
        type: integer
        example: 1960
        description: Publication year of the book to create
      isbn:
        type: string
        example: "978-0446310789"
        description: International Standard Book Number (10-13 characters)
    required:
    - title
    - author
    - year
    - isbn
    type: object
    description: Request model for creating a new book
  handlers.ErrorResponse:
    properties:
      error:
        description: Error message describing what went wrong
        type: string
        example: "book ISBN must be between 10 and 13 characters"
    type: object
    description: Standard error response format
  handlers.MessageResponse:
    properties:
      message:
        description: Informational message about the operation result
        type: string
        example: "Book deleted successfully"
    type: object
    description: Standard message response format
  handlers.UpdateBookRequest:
    properties:
      title:
        type: string
        example: "To Kill a Mockingbird (Updated Edition)"
        description: Updated title of the book
      author:
        type: string
        example: "Harper Lee"
        description: Updated author of the book
      year:
        type: integer
        example: 1960
        description: Updated publication year of the book
      isbn:
        type: string
        example: "978-0446310789"
        description: Updated International Standard Book Number (10-13 characters)
    required:
    - title
    - author
    - year
    - isbn
    type: object
    description: Request model for updating an existing book
host: localhost:8080
info:
  contact: {}
  description: A RESTful API for managing books and URL processing with clean architecture
  title: Library Management System API
  version: "1.0"
paths:
  /books:
    get:
      consumes:
      - application/json
      description: Retrieve all books from the library. Returns an array of all active (non-deleted) books with their complete information including timestamps.
      produces:
      - application/json
      responses:
        "200":
          description: List of all books retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entities.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get all books
      tags:
      - books
    post:
      consumes:
      - application/json
      description: Create a new book in the library. The system will automatically generate a unique ID and set creation/update timestamps. ISBN must be unique and between 10-13 characters.
      parameters:
      - description: Book information including title, author, year, and ISBN
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateBookRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Book created successfully with generated ID and timestamps
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request - Validation error or ISBN already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Create a new book
      tags:
      - books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Soft delete a book from the library. The book is marked as deleted but remains in the database with a deleted_at timestamp. It can be restored later using the restore endpoint.
      parameters:
      - description: Unique identifier of the book to delete
        in: path
        name: id
        required: true
        type: string
        example: "550e8400-e29b-41d4-a716-446655440000"
      produces:
      - application/json
      responses:
        "200":
          description: Book soft-deleted successfully
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "400":
          description: Bad Request - Invalid book ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found - Book with specified ID does not exist
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Delete a book (soft delete)
      tags:
      - books
    get:
      consumes:
      - application/json
      description: Retrieve a specific book by its unique identifier. Returns the complete book information including all timestamps.
      parameters:
      - description: Unique identifier of the book to retrieve
        in: path
        name: id
        required: true
        type: string
        example: "550e8400-e29b-41d4-a716-446655440000"
      produces:
      - application/json
      responses:
        "200":
          description: Book retrieved successfully
          schema:
            $ref: '#/definitions/entities.Book'
        "404":
          description: Not Found - Book with specified ID does not exist
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get a book by ID
      tags:
      - books
    put:
      consumes:
      - application/json
      description: Update an existing book in the library. Only the specified fields will be updated, and the updated_at timestamp will be automatically set. ISBN must remain unique if changed.
      parameters:
      - description: Unique identifier of the book to update
        in: path
        name: id
        required: true
        type: string
        example: "550e8400-e29b-41d4-a716-446655440000"
      - description: Updated book information (all fields are required)
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateBookRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Book updated successfully with new updated_at timestamp
          schema:
            $ref: '#/definitions/entities.Book'
        "400":
          description: Bad Request - Validation error or ISBN already exists
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found - Book with specified ID does not exist
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Update a book
      tags:
      - books
  /books/{id}/permanent:
    delete:
      consumes:
      - application/json
      description: Permanently delete a book from the library. This operation cannot be undone and will remove the book completely from the database. Use with caution.
      parameters:
      - description: Unique identifier of the book to permanently delete
        in: path
        name: id
        required: true
        type: string
        example: "550e8400-e29b-41d4-a716-446655440000"
      produces:
      - application/json
      responses:
        "200":
          description: Book permanently deleted successfully
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "400":
          description: Bad Request - Invalid book ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Not Found - Book with specified ID does not exist
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Permanently delete a book
      tags:
      - books
  /books/{id}/restore:
    post:
      consumes:
      - application/json
      description: Restore a soft-deleted book by clearing the deleted_at timestamp. The book becomes active again and can be accessed through normal endpoints.
      parameters:
      - description: Unique identifier of the soft-deleted book to restore
        in: path
        name: id
        required: true
        type: string
        example: "550e8400-e29b-41d4-a716-446655440000"
      produces:
      - application/json
      responses:
        "200":
          description: Book restored successfully
          schema:
            $ref: '#/definitions/handlers.MessageResponse'
        "400":
          description: Bad Request - Invalid book ID
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Restore a deleted book
      tags:
      - books
  /books/deleted:
    get:
      consumes:
      - application/json
      description: Retrieve all soft-deleted books from the library. These books have been marked as deleted but remain in the database with deleted_at timestamps. They can be restored using the restore endpoint.
      produces:
      - application/json
      responses:
        "200":
          description: List of deleted books retrieved successfully
          schema:
            items:
              $ref: '#/definitions/entities.Book'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Get deleted books
      tags:
      - books
  /books/search:
    get:
      consumes:
      - application/json
      description: Search books by title, author, or year. All parameters are optional and can be combined for advanced filtering.
      parameters:
      - description: Search by title (case-insensitive partial match)
        in: query
        name: title
        type: string
        example: "Gatsby"
      - description: Search by author (case-insensitive partial match)
        in: query
        name: author
        type: string
        example: "Fitzgerald"
      - description: Search by exact publication year
        in: query
        name: year
        type: integer
        example: 1925
      produces:
      - application/json
      responses:
        "200":
          description: Search results returned successfully
          schema:
            items:
              $ref: '#/definitions/entities.Book'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Search books
      tags:
      - books
  /url/process:
    post:
      consumes:
      - application/json
      description: Process a URL according to the specified operation. Supports three operations: 'canonical' (removes tracking parameters), 'redirection' (follows redirects), and 'all' (combines both operations).
      parameters:
      - description: URL processing request with URL and operation type
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/entities.URLRequest'
      produces:
      - application/json
      responses:
        "200":
          description: URL processed successfully
          schema:
            $ref: '#/definitions/entities.URLResponse'
        "400":
          description: Bad Request - Invalid URL or operation
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: Process URL
      tags:
      - url
  /health:
    get:
      consumes:
      - application/json
      description: Health check endpoint to verify service status
      produces:
      - application/json
      responses:
        "200":
          description: Service is healthy
          schema:
            type: object
            properties:
              status:
                type: string
                example: "ok"
              service:
                type: string
                example: "Library Management System API"
              version:
                type: string
                example: "1.0"
      summary: Health check
      tags:
      - system
swagger: "2.0"
